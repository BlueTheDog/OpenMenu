// <auto-generated />
using System;
using Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(OpenMenuContext))]
    [Migration("20230117204236_InitialWithSeedData")]
    partial class InitialWithSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("Domain.Client.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(61),
                            Description = "Cafenelele 5 to go",
                            Email = "contact@5togo.ro",
                            Name = "5ToGo",
                            Phone = "0761.000.000"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(62),
                            Description = "Cafenelele Starbucks",
                            Email = "contact@starbucks.ro",
                            Name = "Starbucks",
                            Phone = "0761.111.111"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(63),
                            Description = "Restaurantele Marty",
                            Email = "contact@martycluj.ro",
                            Name = "MartyRestaurants",
                            Phone = "0761.222.222"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(64),
                            Description = "Dacia Service description",
                            Email = "contact@dacia.ro",
                            Name = "Dacia Service",
                            Phone = "0761.333.333"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(65),
                            Description = "Mancare cu suflet",
                            Email = "contact@boulevard.ro",
                            Name = "Boulevard",
                            Phone = "0761.444.444"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(66),
                            Description = "Avioanele, ca am mai multe.",
                            Email = "contact@tiriac.ro",
                            Name = "TiriacSerices",
                            Phone = "0761.666.666"
                        });
                });

            modelBuilder.Entity("Domain.ClientType.ClientTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(49),
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(50),
                            Name = "Cafenea"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(50),
                            Name = "Atelier auto"
                        });
                });

            modelBuilder.Entity("Domain.Location.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            ClientTypeId = 2,
                            DateCreated = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(84),
                            Description = "La 5 to go folosim o cafea cu o aromă intensă, corpolentă , cremoasă ce se constituie într-un blend unic, creat special pentru lanţul de cafenele 5 to go.",
                            Name = "5ToGo XL"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            ClientTypeId = 2,
                            DateCreated = new DateTime(2022, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(85),
                            Description = "Starbucks Corporation is an American multinational chain of coffeehouses and roastery reserves headquartered in Seattle, Washington. ",
                            Name = "Starbucks"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 1,
                            ClientTypeId = 2,
                            DateCreated = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(86),
                            Description = "Colaborăm şi susţinem ferme care respectă fructul de cafea, dar mai mult, respectă oamenii implicaţi în povestea cafelei.",
                            Name = "5ToGo Hunedoara"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 3,
                            ClientTypeId = 1,
                            DateCreated = new DateTime(2022, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(86),
                            Description = "Cele șase locații Marty Restaurants sunt asemănătoare în esență, dar fiecare dintre ele propune o atmosferă unică. ",
                            Name = "Marty Restaurants"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 5,
                            ClientTypeId = 1,
                            DateCreated = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(87),
                            Description = "Mereu delicios",
                            Name = "Boulevard"
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 4,
                            ClientTypeId = 3,
                            DateCreated = new DateTime(2022, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(88),
                            Name = "Dacia Service"
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 4,
                            ClientTypeId = 3,
                            DateCreated = new DateTime(2022, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(89),
                            Name = "Renault Service"
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 6,
                            ClientTypeId = 3,
                            DateCreated = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(89),
                            Name = "Mercedes Service"
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 6,
                            ClientTypeId = 3,
                            DateCreated = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(90),
                            Name = "BMW Service"
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 6,
                            ClientTypeId = 3,
                            DateCreated = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(91),
                            Name = "Tesla Service"
                        });
                });

            modelBuilder.Entity("Domain.MenuItem.MenuItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(24),
                            Description = "1 shot espresso",
                            Name = "Espresso",
                            Price = 6m
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(26),
                            Description = "2 shots and milk",
                            Name = "Flat White",
                            Price = 9m
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(26),
                            Description = "one shot more milk",
                            Name = "Latte",
                            Price = 12m
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(27),
                            Description = "The CocaCola company",
                            Name = "Coca cola",
                            Price = 6m
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(28),
                            Description = "not the right one",
                            Name = "Pepsi",
                            Price = 5m
                        });
                });

            modelBuilder.Entity("Domain.MenuItemType.MenuItemTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("MenuItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(2),
                            LocationId = 1,
                            Name = "Cafea"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(4),
                            LocationId = 1,
                            Name = "Deserturi"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(5),
                            LocationId = 1,
                            Name = "Cafea boabe"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2023, 1, 17, 20, 42, 36, 289, DateTimeKind.Utc).AddTicks(6),
                            LocationId = 1,
                            Name = "Racoritoare"
                        });
                });

            modelBuilder.Entity("MenuItemEntityMenuItemTypeEntity", b =>
                {
                    b.Property<int>("MenuItemTypesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MenuItemsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MenuItemTypesId", "MenuItemsId");

                    b.HasIndex("MenuItemsId");

                    b.ToTable("MenuItemEntityMenuItemTypeEntity");

                    b.HasData(
                        new
                        {
                            MenuItemTypesId = 1,
                            MenuItemsId = 1
                        },
                        new
                        {
                            MenuItemTypesId = 2,
                            MenuItemsId = 2
                        },
                        new
                        {
                            MenuItemTypesId = 1,
                            MenuItemsId = 3
                        },
                        new
                        {
                            MenuItemTypesId = 4,
                            MenuItemsId = 4
                        },
                        new
                        {
                            MenuItemTypesId = 4,
                            MenuItemsId = 5
                        });
                });

            modelBuilder.Entity("Domain.Location.LocationEntity", b =>
                {
                    b.HasOne("Domain.Client.ClientEntity", "Client")
                        .WithMany("Locations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ClientType.ClientTypeEntity", "ClientType")
                        .WithMany("Locations")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientType");
                });

            modelBuilder.Entity("Domain.MenuItemType.MenuItemTypeEntity", b =>
                {
                    b.HasOne("Domain.Location.LocationEntity", "Location")
                        .WithMany("MenuItemTypes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MenuItemEntityMenuItemTypeEntity", b =>
                {
                    b.HasOne("Domain.MenuItemType.MenuItemTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("MenuItemTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MenuItem.MenuItemEntity", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Client.ClientEntity", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.ClientType.ClientTypeEntity", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.Location.LocationEntity", b =>
                {
                    b.Navigation("MenuItemTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
